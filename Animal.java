import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * To support an individual cat
 * @author Chris Loftus and Faisal Rezwan
 * @version 3 (20th February 2023)
 */
public class Animal implements Comparable <Animal> {

	public ArrayList<Owner> originalOwners;

	public int numOfOwners;
	public String name;
	public String type;
	public String favFood;
	public int foodPerDay;

	/**
	 * Default constructor
	 */
	public Animal() {
		this("unknown", "unknown", 1);
	}

	/**
     * Constructor for the Animal
     *
     * Owner   A list of original owners: a copy is made
     * @param name        The Animal's name

     * @param food        The kind of food it eats
     * @param mealsPerDay Number of feeds per day
     */
	public Animal(String name, String food, int mealsPerDay) {
		this.name = name;
		originalOwners = new ArrayList<Owner>();
		favFood = food;
		foodPerDay = mealsPerDay;
	}



	public String getName() {
		return name;
	}

	public void setName(String newName) {
		name = newName;
	}

	public void setType(String type) {
		this.type = type;
	}


	public String getType() {
		return type;
	}

	/**
	 * Returns a copy of the original owners
	 * @return A copy of the original owners as an array
	 */
	public Owner[] getOriginalOwners(){
		Owner[] result = new Owner[originalOwners.size()];
		result = originalOwners.toArray(result);
		return result;
	}

	/**
	 * To add an original owner
	 * @param o An original owner
	 */
	public void addOriginalOwner(Owner o){
		originalOwners.add(o);
	}






	/**
	 * How many times a day to feed the cat
	 * @param feeds The number of feeds per day
	 */
	public void setFeedsPerDay(int feeds){
		foodPerDay = feeds;
	}
	
	/**
	 * The number of feeds per day the cat is fed
	 * @return The number of feeds per day
	 */
	public int getFeedsPerDay(){
		return foodPerDay;
	}
	
	/**
	 * What's his favourite food?
	 * @param food The food it likes
	 */
	public void setFavouriteFood(String food){
		favFood = food;
	}
	
	/**
	 * The food the cat likes to eat
	 * @return The food 
	 */
	public String getFavouriteFood(){
		return favFood;
	}

	/**
	 * Reads in information about the animal from the file will wait for dog or cat to written first before writing the rest of their attributes.
	 */
	public void load(Scanner infile){
		this.name = infile.next();
		int numOwners = infile.nextInt();
		originalOwners = new ArrayList<>();
		for (int oCount = 0; oCount < numOwners; oCount++) {
			String name = infile.next();
			String phone = infile.next();
			Owner owner = new Owner(name, phone);
			this.originalOwners.add(owner);
		}
		this.foodPerDay = infile.nextInt();
		this.favFood = infile.next();
	}


	/**
	 * Saves the animals basic attributes to the text file. Including Owner name and phone number.
	 * @param pw PrintWriter for the text file.
	 */
	public void save(PrintWriter pw){
		pw.println(name);
		pw.println(originalOwners.size());
		for (Owner o : originalOwners) {
			pw.println(o.getName());
			pw.println(o.getPhone());
		}
		pw.println(foodPerDay);
		pw.println(favFood);

	}

	/**
	 * Note that this only compares equality based on a
	 * cat's name.
	 * @param obj the other cat to compare against.
	 */
	@Override
	public boolean equals(Object obj) { // Generated by IDE to be more robust
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Animal other = (Animal) obj;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}

	/**
	 * A basic implementation to just return all the data in string form
	 */
	public String toString() {
		StringBuilder sb = new StringBuilder(20);
		return sb.append("Animal name: ").append(name).append("\nType: ").append(type).append("\nOriginal Owner(s) with phone: ").append(originalOwners).append("\nFood per day: ").append(foodPerDay).append(" times\n").toString();
	}

	@Override
	public int compareTo(Animal o) {
		return 0;
	}
}
